{"version":3,"sources":["components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["MarvelLoader","className","type","color","height","width","timeout","App","useState","isLoading","setIsLoading","all","setAll","data","setData","search","setSearch","startYear","setStartYear","endYear","setEndYear","fetchData","fetch","then","res","json","console","log","results","length","filterBySearch","useEffect","parsed","queryString","parse","window","location","pathname","split","searchString","sy","ey","stringified","stringify","history","replaceState","arr","filter","title","trim","toLowerCase","indexOf","placeholder","value","onChange","target","onClick","parseInt","alert","map","id","thumbnail","path","extension","src","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c2d11e4.chunk.js","sourcesContent":["import Loader from \"react-loader-spinner\";\r\nexport const MarvelLoader = () => {\r\n  return (\r\n    <div className=\"loaderContainer\">\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { MarvelLoader } from \"./components\";\nimport LazyLoad from \"react-lazyload\";\nimport queryString from \"query-string\";\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [all, setAll] = useState(null);\n  const [data, setData] = useState(null);\n  const [search, setSearch] = useState(\"\");\n  const [startYear, setStartYear] = useState(\"\");\n  const [endYear, setEndYear] = useState(\"\");\n\n  const fetchData = () => {\n    setIsLoading(true);\n    fetch(\n      `https://gateway.marvel.com:443/v1/public/comics?dateRange=${startYear}-01-01%2C${endYear}-01-02&limit=50&apikey=ec083831340a59be9e3a399171cdd773`\n    )\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        setIsLoading(false);\n        const { data } = res;\n        if (!data) return;\n\n        const { results } = data;\n        if (!results || !results.length) return;\n        \n        setData(filterBySearch(results));\n        setAll(results);\n      });\n  };\n\n  useEffect(() => {\n    const parsed = queryString.parse(window.location.pathname.split(\"/\")[1]);\n    const { searchString, sy, ey } = parsed;\n    setSearch(searchString ? searchString : \"\");\n    setStartYear(sy ? sy : \"1990\");\n    setEndYear(ey ? ey : \"2021\");\n  }, []);\n\n  useEffect(() => {\n    if ((!all || !all.length) && !isLoading && endYear && startYear) {\n      fetchData(); // only initialy when parsed filters are availible\n    }\n\n    const stringified = queryString.stringify({\n      searchString: search,\n      sy: startYear,\n      ey: endYear,\n    });\n\n    const { location } = window;\n\n    if (location.search !== stringified) {\n      window.history.replaceState({}, \"\", \"/\" + stringified);\n    }\n  }, [search, startYear, endYear]);\n\n  useEffect(() => {\n    if (!search.length) {\n      return setData(all);\n    }\n    setData(filterBySearch(data));\n  }, [search]);\n\n  const filterBySearch = (arr) => {\n    if (!arr || !arr.length) return [];\n    if (!search || !search.length) return arr;\n    let filtered = arr.filter(({ title }) => {\n      return (\n        title.trim().toLowerCase().indexOf(search.trim().toLowerCase()) > -1\n      );\n    });\n\n    return filtered;\n  };\n\n  const fetchByYearRange = () => {\n    let sy = parseInt(startYear, 10);\n    let ey = parseInt(endYear, 10);\n    if (\n      startYear.length === 4 &&\n      endYear.length === 4 &&\n      sy <= ey &&\n      sy >= 1900 &&\n      ey <= 2021\n    ) {\n      fetchData();\n    } else {\n      alert(\n        \"Years must be in range 1900-2021 and endYear must be bigger or equal to startYear\"\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"searchContainer\">\n        <input\n          className=\"search\"\n          type=\"text\"\n          placeholder=\"Search here...\"\n          value={search}\n          onChange={({ target: { value } }) => setSearch(value)}\n        />\n      </div>\n      <div className=\"dateFilterContainer\">\n        <input\n          className=\"yearStart\"\n          type=\"text\"\n          placeholder=\"Start year\"\n          value={startYear}\n          onChange={({ target: { value } }) => setStartYear(value)}\n        />\n        <span className=\"rangeDevider\">-</span>\n        <input\n          className=\"yearEnd\"\n          type=\"text\"\n          placeholder=\"End year\"\n          value={endYear}\n          onChange={({ target: { value } }) => setEndYear(value)}\n        />\n        <button className=\"filterButton\" onClick={fetchByYearRange}>\n          Apply\n        </button>\n      </div>\n      {!all || !all.length || isLoading ? (\n        <MarvelLoader />\n      ) : (\n        <>\n          {!data || !data.length ? (\n            <h1>No results...</h1>\n          ) : (\n            <div className=\"comicsList\">\n              {data.map(({ id, title, thumbnail: { path, extension } }) => (\n                <div key={id} className=\"comicTile\">\n                  <LazyLoad height={100}>\n                    <img\n                      src={path + \"/standard_medium.\" + extension}\n                      className=\"thumbnail\"\n                    />\n                  </LazyLoad>\n                  <p>{title}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}